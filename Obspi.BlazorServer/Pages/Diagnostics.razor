@page "/diagnostics"
@using Obspi.BlazorServer.Services;
@using Obspi.Common.Dto
@implements IDisposable
@inject IObspiService ObspiService

<MudTable Items="@_diagnostics"
          Hover="true"
          LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Diagnostics</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Value</MudTh>
        <MudTh>Unit</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Value">@context.Value</MudTd>
        <MudTd DataLabel="Unit">@context.Unit</MudTd>
    </RowTemplate>
</MudTable>

@code {
    private System.Timers.Timer _timer = new(1000);
    private IEnumerable<DiagnosticsDto>? _diagnostics;

    protected override async Task OnInitializedAsync()
    {
        _timer.Elapsed += TimerElapsed;
        _timer.AutoReset = true;
        _timer.Enabled = true;

        await GetDiagnostics();
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            _timer.Elapsed -= TimerElapsed;
            _timer.Dispose();
        }
    }

    private async void TimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        await GetDiagnostics();
        await InvokeAsync(StateHasChanged);
    }

    private async Task GetDiagnostics()
    {
        _diagnostics = await ObspiService.GetDiagnostics();
    }
}
