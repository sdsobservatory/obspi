@page "/observatory"
@using CommunityToolkit.Mvvm.Input
@using Obspi.BlazorServer.Components
@using Obspi.BlazorServer.Services
@using Obspi.Common.Dto;
@inject ILogger<Observatory> Logger
@inject IObspiService ObspiService
@inject ISnackbar Snackbar
@implements IDisposable

<MudGrid>
    <MudItem xs="12">
        <LockableCard @ref="RoofCard" Title="Roof">
            <MudStack>
                <MudGrid>
                    <MudItem Class="d-flex flex-wrap gap-4" xs="3">
                        <MudAvatar Size="Size.Small" Color="@(ObservatoryState?.CanRoofOpen ?? false ? Color.Success : Color.Error)"/>
                        <MudText>Safe To Open</MudText>
                    </MudItem>
                    <MudItem Class="d-flex flex-wrap gap-4" xs="3">
                        <MudAvatar Size="Size.Small" Color="@(ObservatoryState?.CanRoofClose ?? false ? Color.Success : Color.Error)" />
                        <MudText>Safe To Close</MudText>
                    </MudItem>
                    <MudItem Class="d-flex flex-wrap gap-4" xs="3">
                        <MudAvatar Size="Size.Small" Color="@(ObservatoryState?.IsRoofOpen ?? false ? Color.Success : Color.Error)" />
                        <MudText>Roof Open</MudText>
                    </MudItem>
                    <MudItem Class="d-flex flex-wrap gap-4" xs="3">
                        <MudAvatar Size="Size.Small" Color="@(ObservatoryState?.IsRoofClosed ?? false ? Color.Success : Color.Error)" />
                        <MudText>Roof Closed</MudText>
                    </MudItem>
                </MudGrid>
                <MudStack Row="true"
                          AlignItems="AlignItems.Start">
                    <MudButton Disabled="@(!RoofCard!.IsUnlocked || ToggleRoofCommand.IsRunning)"
                               Command="ToggleRoofCommand"
                               Variant="Variant.Filled"
                               Color="Color.Primary">
                        @if (ToggleRoofCommand.IsRunning)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        }
                        else
                        {
                            <MudText>Open / Close</MudText>
                        }
                    </MudButton>
                </MudStack>
            </MudStack>
        </LockableCard>
    </MudItem>
    <MudItem xs="6">
        <LockableCard @ref="Pier4Card" Title="Charlie">
            <MudStack Row="true"
                      AlignItems="AlignItems.Start">
                <MudButton Disabled="@(!Pier4Card!.IsUnlocked || RestartPier4ACCommand.IsRunning)"
                           Command="RestartPier4ACCommand"
                           Variant="Variant.Filled"
                           FullWidth="true"
                           Color="Color.Primary">
                    @if (RestartPier4ACCommand.IsRunning)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudText>Restart AC</MudText>
                    }
                </MudButton>
                <MudButton Disabled="@(!Pier4Card!.IsUnlocked || RestartPier4DCCommand.IsRunning)"
                           Command="RestartPier4DCCommand"
                           Variant="Variant.Filled"
                           FullWidth="true"
                           Color="Color.Primary">
                    @if (RestartPier4DCCommand.IsRunning)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudText>Restart DC</MudText>
                    }
                </MudButton>
            </MudStack>
        </LockableCard>
    </MudItem>
    <MudItem xs="6">
        <LockableCard @ref="Pier2Card" Title="Josh 2">
            <MudStack Row="true"
                      AlignItems="AlignItems.Start">
                <MudButton Disabled="@(!Pier2Card!.IsUnlocked || RestartPier2ACCommand.IsRunning)"
                           Command="RestartPier2ACCommand"
                           Variant="Variant.Filled"
                           FullWidth="true"
                           Color="Color.Primary">
                    @if (RestartPier2ACCommand.IsRunning)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudText>Restart AC</MudText>
                    }
                </MudButton>
                <MudButton Disabled="@(!Pier2Card!.IsUnlocked || RestartPier2DCCommand.IsRunning)"
                           Command="RestartPier2DCCommand"
                           Variant="Variant.Filled"
                           FullWidth="true"
                           Color="Color.Primary">
                    @if (RestartPier2DCCommand.IsRunning)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudText>Restart DC</MudText>
                    }
                </MudButton>
                <MudButton Disabled="@(!Pier2Card!.IsUnlocked || Restart10Micron2Command.IsRunning)"
                           Command="Restart10Micron2Command"
                           Variant="Variant.Filled"
                           FullWidth="true"
                           Color="Color.Primary">
                    @if (Restart10Micron2Command.IsRunning)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudText>Restart 10Micron</MudText>
                    }
                </MudButton>
            </MudStack>
        </LockableCard>
    </MudItem>
    <MudItem xs="6">
        <LockableCard @ref="Pier3Card" Title="Alex">
            <MudStack Row="true"
                      AlignItems="AlignItems.Start">
                <MudButton Disabled="@(!Pier3Card!.IsUnlocked || RestartPier3ACCommand.IsRunning)"
                           Command="RestartPier3ACCommand"
                           Variant="Variant.Filled"
                           FullWidth="true"
                           Color="Color.Primary">
                    @if (RestartPier3ACCommand.IsRunning)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudText>Restart AC</MudText>
                    }
                </MudButton>
                <MudButton Disabled="@(!Pier3Card!.IsUnlocked || RestartPier3DCCommand.IsRunning)"
                           Command="RestartPier3DCCommand"
                           Variant="Variant.Filled"
                           FullWidth="true"
                           Color="Color.Primary">
                    @if (RestartPier3DCCommand.IsRunning)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudText>Restart DC</MudText>
                    }
                </MudButton>
                <MudButton Disabled="@(!Pier3Card!.IsUnlocked || Restart10Micron1Command.IsRunning)"
                           Command="Restart10Micron1Command"
                           Variant="Variant.Filled"
                           FullWidth="true"
                           Color="Color.Primary">
                    @if (Restart10Micron1Command.IsRunning)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudText>Restart 10Micron</MudText>
                    }
                </MudButton>
            </MudStack>
        </LockableCard>
    </MudItem>
    <MudItem xs="6">
        <LockableCard @ref="Pier1Card" Title="Josh 1">
            <MudStack Row="true"
                      AlignItems="AlignItems.Start">
                <MudButton Disabled="@(!Pier1Card!.IsUnlocked || RestartPier1ACCommand.IsRunning)"
                           Command="RestartPier1ACCommand"
                           Variant="Variant.Filled"
                           FullWidth="true"
                           Color="Color.Primary">
                    @if (RestartPier1ACCommand.IsRunning)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudText>Restart AC</MudText>
                    }
                </MudButton>
                <MudButton Disabled="@(!Pier1Card!.IsUnlocked || RestartPier1DCCommand.IsRunning)"
                           Command="RestartPier1DCCommand"
                           Variant="Variant.Filled"
                           FullWidth="true"
                           Color="Color.Primary">
                    @if (RestartPier1DCCommand.IsRunning)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudText>Restart DC</MudText>
                    }
                </MudButton>
            </MudStack>
        </LockableCard>
    </MudItem>
</MudGrid>

@code {
    System.Timers.Timer _timer = new(1000);

    LockableCard? RoofCard;
    LockableCard? Pier1Card;
    LockableCard? Pier2Card;
    LockableCard? Pier3Card;
    LockableCard? Pier4Card;
    ObservatoryStateDto? ObservatoryState;

    AsyncRelayCommand ToggleRoofCommand;
    AsyncRelayCommand RestartPier1ACCommand;
    AsyncRelayCommand RestartPier1DCCommand;
    AsyncRelayCommand RestartPier2ACCommand;
    AsyncRelayCommand RestartPier2DCCommand;
    AsyncRelayCommand RestartPier3ACCommand;
    AsyncRelayCommand RestartPier3DCCommand;
    AsyncRelayCommand RestartPier4ACCommand;
    AsyncRelayCommand RestartPier4DCCommand;
    AsyncRelayCommand Restart10Micron1Command;
    AsyncRelayCommand Restart10Micron2Command;

    public Observatory()
    {
        ToggleRoofCommand = new(ToggleRoof);
        RestartPier1ACCommand = new(RestartPier1AC);
        RestartPier1DCCommand = new(RestartPier1DC);
        RestartPier2ACCommand = new(RestartPier2AC);
        RestartPier2DCCommand = new(RestartPier2DC);
        RestartPier3ACCommand = new(RestartPier3AC);
        RestartPier3DCCommand = new(RestartPier3DC);
        RestartPier4ACCommand = new(RestartPier4AC);
        RestartPier4DCCommand = new(RestartPier4DC);
        Restart10Micron1Command = new(Restart10Micron1);
        Restart10Micron2Command = new(Restart10Micron2);

        ToggleRoofCommand.CanExecuteChanged += UpdateUi;
        RestartPier1ACCommand.CanExecuteChanged += UpdateUi;
        RestartPier1DCCommand.CanExecuteChanged += UpdateUi;
        RestartPier2ACCommand.CanExecuteChanged += UpdateUi;
        RestartPier2DCCommand.CanExecuteChanged += UpdateUi;
        RestartPier3ACCommand.CanExecuteChanged += UpdateUi;
        RestartPier3DCCommand.CanExecuteChanged += UpdateUi;
        RestartPier4ACCommand.CanExecuteChanged += UpdateUi;
        RestartPier4DCCommand.CanExecuteChanged += UpdateUi;
        Restart10Micron1Command.CanExecuteChanged += UpdateUi;
        Restart10Micron2Command.CanExecuteChanged += UpdateUi;
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);

        _timer.Elapsed -= TimerElapsed;
        _timer.Dispose();

        ToggleRoofCommand.CanExecuteChanged -= UpdateUi;
        RestartPier1ACCommand.CanExecuteChanged -= UpdateUi;
        RestartPier1DCCommand.CanExecuteChanged -= UpdateUi;
        RestartPier2ACCommand.CanExecuteChanged -= UpdateUi;
        RestartPier2DCCommand.CanExecuteChanged -= UpdateUi;
        RestartPier3ACCommand.CanExecuteChanged -= UpdateUi;
        RestartPier3DCCommand.CanExecuteChanged -= UpdateUi;
        RestartPier4ACCommand.CanExecuteChanged -= UpdateUi;
        RestartPier4DCCommand.CanExecuteChanged -= UpdateUi;
        Restart10Micron1Command.CanExecuteChanged -= UpdateUi;
        Restart10Micron2Command.CanExecuteChanged -= UpdateUi;
    }

    protected override async Task OnInitializedAsync()
    {
        _timer.Elapsed += TimerElapsed;
        _timer.AutoReset = true;
        _timer.Enabled = true;

        ObservatoryState = await ObspiService.GetObservatoryState();
    }

    private async void TimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        try
        {
            ObservatoryState = await ObspiService.GetObservatoryState();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception polling for observatory state");
        }
    }

    private async void UpdateUi(object? sender, EventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }

    public async Task ToggleRoof()
    {
        try
        {
            await ObspiService.ToggleRoof();
        }
        catch (HttpRequestException e) when (e.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            Snackbar.Add("Open / Close roof not allowed", Severity.Error);
        }
    }

    public Task RestartPier1AC() => ObspiService.RestartPier1AC();
    public Task RestartPier1DC() => ObspiService.RestartPier1DC();
    public Task RestartPier2AC() => ObspiService.RestartPier2AC();
    public Task RestartPier2DC() => ObspiService.RestartPier2DC();
    public Task RestartPier3AC() => ObspiService.RestartPier3AC();
    public Task RestartPier3DC() => ObspiService.RestartPier3DC();
    public Task RestartPier4AC() => ObspiService.RestartPier4AC();
    public Task RestartPier4DC() => ObspiService.RestartPier4DC();
    public Task Restart10Micron1() => ObspiService.Restart10Micron1();
    public Task Restart10Micron2() => ObspiService.Restart10Micron2();
}
