@page "/iocontrol"
@using System.Text.Json
@using System.Text.Json.Serialization
@using Humanizer
@using Obspi.BlazorServer.Services
@using Obspi.Common.Dto
@implements IDisposable
@inject IObspiService ObspiService;

<MudContainer MaxWidth="MaxWidth.Small"
              Class="mt-0">
    @if (_outputs is null || _inputs is null)
    {
        <MudProgressCircular Color="Color.Default"
                             Indeterminate="true" />
    }
    else
    {
        <MudAlert Class="mb-4"
                  Severity="Severity.Warning">Toggling outputs is immediate.</MudAlert>

        <MudGrid Justify="Justify.Center" Spacing="2">
            <MudItem>
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">Outputs</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudList Dense="true">
                            @foreach (var output in _outputs)
                            {
                                <MudStack Row="true"
                                          Style="height: 40px"
                                          AlignItems="AlignItems.Center">
                                    <MudSwitch @bind-Checked="@output.Value"
                                               @bind-Checked:after="() => ToggleOutput(output)"
                                               Color="@Color.Success" />
                                    <MudText>@output.Name.Humanize(LetterCasing.Title)</MudText>
                                </MudStack>
                                <MudDivider />
                            }
                        </MudList>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem>
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">Inputs</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudList Dense="true">
                            @foreach (var input in _inputs)
                            {
                                <MudStack Row="true"
                                          AlignItems="AlignItems.Center"
                                          Class="ma-2">
                                    <MudAvatar Size="Size.Small"
                                               Color="@(input.Value ? Color.Success : Color.Default)" />
                                    <MudText>@input.Name.Humanize(LetterCasing.Title)</MudText>
                                </MudStack>
                                <MudDivider />
                            }
                        </MudList>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private System.Timers.Timer _timer = new(1000);
    private IEnumerable<IoDto>? _outputs;
    private IEnumerable<IoDto>? _inputs;

    protected override async Task OnInitializedAsync()
    {
        _timer.Elapsed += TimerElapsed;
        _timer.AutoReset = true;
        _timer.Enabled = true;
        
        await GetIo();
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            _timer.Elapsed -= TimerElapsed;
            _timer.Dispose();
        }
    }

    private async Task GetIo()
    {
        _outputs = await ObspiService.GetOutputs();
        _inputs = await ObspiService.GetInputs();
    }

    private async Task ToggleOutput(IoDto io)
    {
        await ObspiService.SetOutput(io.Name, io.Value);
        await GetIo();
    }

    private async void TimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        await GetIo();
        await InvokeAsync(StateHasChanged);
    }
}